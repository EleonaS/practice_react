{"version":3,"sources":["helpers/filterArr.js","components/FilmsListItem/FilmsListItem.styled.js","components/Overlay/Overlay.styled.js","components/FilmsListItem/FilmsListItem.js","components/FilmsList/FilmsList.styled.js","components/FilmsList/FilmsList.js","components/Container/Container.styled.js","components/Container/Container.js","components/Overlay/Overlay.js","components/Button/Button.styled.js","components/Button/Button.js","components/Loader/Loader.js","App.js","Services/api.js","reportWebVitals.js","index.js"],"names":["filterMovies","movies","map","id","title","img","backdrop_path","text","overview","isWatched","Title","styled","h2","ListItem","li","StyledOverlay","div","Text","p","Label","span","FilmsListItem","onClick","onStatusClick","src","alt","type","StyledList","ul","FilmsList","StyledContainer","Container","children","Overlay","useEffect","window","addEventListener","overlayClose","keyCode","StyledButton","button","Button","Loader","color","height","width","timeout","App","useState","page","setPage","setMovies","setText","isLoading","setIsLoading","axios","get","api","then","data","prevState","results","catch","error","console","log","finally","scrollTo","top","document","documentElement","scrollHeight","behavior","length","newMovies","movie","push","prevPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa8c99f6.chunk.js","sourcesContent":["const filterMovies = movies =>\r\n  movies.map(({ id, title, backdrop_path: img, overview: text }) =>\r\n({\r\n  id,\r\n  title,\r\n  img,\r\n  text,\r\n  isWatched: false,\r\n}));\r\n    \r\nexport default filterMovies;","import styled from 'styled-components';\r\n\r\nconst Title = styled.h2`\r\ncolor: tomato;`;\r\n\r\nconst ListItem = styled.li`\r\ncursor:pointer;\r\nheight:400px;\r\n  &:hover  ${Title} {\r\n  color: blue;\r\n  font-size:28px;\r\n}\r\n`;\r\n\r\nexport { Title, ListItem };","import styled from 'styled-components';\r\n\r\nconst StyledOverlay = styled.div`\r\nposition:fixed;\r\ntop: 0;\r\nleft:0;\r\ndisplay:flex;\r\nflex-direction:column;\r\njustify-content:center;\r\nalign-items: center;\r\n\r\nwidth:100%;\r\nheight: 100vh;\r\nbackground-color: gray;\r\n`;\r\n\r\n\r\nconst Text = styled.p`\r\nwidth: 700px;\r\npadding:30px;\r\nbackground-color: #fff;\r\n`;\r\n\r\nconst Label = styled.span`\r\n  display: block;\r\n  margin-top: 10px;\r\n  padding: 5px;\r\n  background-color: #fff;\r\n  color: tomato;\r\n  text-align: center;\r\n  border: 3px solid black;\r\n  cursor: pointer;\r\n`\r\n\r\nexport {StyledOverlay,Text, Label};","import PropTypes from 'prop-types';\r\nimport { Title } from './FilmsListItem.styled';\r\nimport {Label } from '../Overlay/Overlay.styled'\r\nconst FilmsListItem = ({  title, img, id, isWatched,onClick, text, onStatusClick }) =>\r\n  (<>\r\n    <img src={`https://image.tmdb.org/t/p/w400/${img}`} alt={title} />\r\n  <Title>{title}</Title>\r\n  <button type=\"button\" onClick={() => onClick(text) }>Read overview</button>\r\n  <p onClick={()=>onStatusClick(id)}>Is movie watched:<Label>{`${isWatched}`}</Label></p>\r\n</>);\r\n\r\nFilmsListItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  img: PropTypes.string.isRequired,\r\n  id:PropTypes.number.isRequired,\r\n  isWatched: PropTypes.bool.isRequired,\r\n  onStatusClick: PropTypes.func.isRequired,\r\n  \r\n}\r\n\r\nexport default FilmsListItem;","import styled from 'styled-components';\r\n\r\nconst StyledList = styled.ul`\r\nlist-style:none;\r\ndisplay: grid;\r\ngrid-template-columns:repeat(3,1fr);\r\ngap: 30px;\r\npadding-left: 0;\r\n\r\n\r\n`;\r\n\r\nexport { StyledList };","import PropTypes from 'prop-types';\r\nimport FilmsListItem from '../FilmsListItem/FilmsListItem';\r\nimport { StyledList } from './FilmsList.styled';\r\nimport { ListItem } from '../FilmsListItem/FilmsListItem.styled';\r\n\r\nconst FilmsList = ({ movies, onClick, onStatusClick  }) => (\r\n    <StyledList>\r\n        {movies.map(({ id, title, img, text,isWatched }) => (\r\n          <ListItem key={id} >\r\n                <FilmsListItem\r\n                    id={id}\r\n                    title={title}\r\n              img={img}\r\n              isWatched={isWatched}\r\n              text={text}\r\n              onClick={onClick}\r\n              onStatusClick={onStatusClick}\r\n                    \r\n                />\r\n            </ListItem>\r\n        ))}\r\n    </StyledList>\r\n);\r\n\r\nFilmsList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n\r\n    }).isRequired).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  onStatusClick: PropTypes.func.isRequired,\r\n};\r\nexport default FilmsList;","import styled from 'styled-components';\r\nconst StyledContainer = styled.div`\r\nwidth:1240px;\r\nmargin-left:auto;\r\nmargin-right: auto;`\r\n\r\nexport { StyledContainer };","import PropTypes from 'prop-types';\r\nimport { StyledContainer } from './Container.styled'\r\n\r\nconst Container = ({ children }) => <StyledContainer>{children}</StyledContainer>;\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n}\r\nexport default Container;","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledOverlay, Text } from './Overlay.styled'\r\nconst Overlay = ({ text, onClick }) => {\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener('keydown', overlayClose);\r\n    return ()=>{window.addEventListener('keydown', overlayClose);}\r\n})\r\n\r\n\r\n  const overlayClose = ({keyCode}) => {\r\n    if (keyCode === 27) {\r\n     onClick()\r\n   }\r\n  }\r\n  return (\r\n  <StyledOverlay onClick={onClick}>\r\n  <Text>{text}</Text>\r\n  \r\n</StyledOverlay>);\r\n\r\n}\r\n\r\nOverlay.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  \r\n}\r\nexport default Overlay;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\ndisplay: block;\r\nmargin-left: auto;\r\nmargin-right: auto;\r\n  \r\n  width: 200px;\r\n  padding: 5px 10px;\r\n  cursor: pointer;\r\n  border: 2px solid green;\r\n  border-radius: 7px;\r\n  font-size: 18px;\r\n  text-transform: uppercase;\r\n  color: black;\r\n  background-color: transparent;\r\n  transition: all 250ms ease-in-out;\r\n  &:hover {\r\n    border-color: gray;\r\n    color: green;\r\n    font-weight: 600;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\nexport {  StyledButton };","import { StyledButton } from './Button.styled'\r\n\r\nconst Button = ({ onClick }) => (\r\n    <StyledButton type=\"button\" onClick={onClick}>\r\n        Load more\r\n    </StyledButton>\r\n);\r\nexport default Button;","import LoaderSpinner from \"react-loader-spinner\";\r\n\r\nconst Loader = () => (\r\n    <div>\r\n        <LoaderSpinner type=\"ThreeDots\" color=\"pink\" height={100} width={100} timeout={10000} />\r\n    </div>\r\n);\r\n\r\nexport default Loader;","/*import { Component } from 'react';\n//import movies from './data/films.json';\nimport filterMovies from './helpers/filterArr';\nimport FilmsList from './components/FilmsList/FilmsList';\nimport Container from './components/Container/Container';\nimport Overlay from './components/Overlay/Overlay';\nimport Button  from './components/Button/Button';\nimport * as api from './Services/api'\n\nconst INITIAL_STATE = {\n  page: 1,\n  movies:[], \n}\n\nclass App extends Component {\n  state = {\n//movies: [...filterMovies(movies)],\n    ...INITIAL_STATE,\n    text: '',\n    isLoading:false,\n  };\n\n componentDidMount() {\n        const { page } = this.state;\n        this.getFilms(page);\n }\n  \n   componentDidUpdate(prevProps, prevState) {\n        const { movies, page } = this.state;\n       if (prevState.page !== page) {\n           this.getFilms(page);\n       }\n     if (page > 1) {\n       window.scrollTo({\n                top: document.documentElement.scrollHeight,\n                behavior: 'smooth',\n            })};\n         \n    }\n\n  getFilms = page => {\n    this.setState({ isLoading: true });\n    api.getFilms(page).then(\n      ({ data }) => {\n        console.log(data); this.setState(prevState => (\n          {movies: [...prevState.movies, ...filterMovies(data.results)],\n          }));\n        })\n      .catch(error => console.log(error))\n      .finally(() => this.setState({ isLoading: false }));\n     };\n\n  handleClick = () => {\n    let { page } = this.state;\n    page += 1;\n    this.setState({ page });\n  \n    //this.setState((prev) => ({ page: prev.page + 1 }))\n  };\n\n  \n\n  handleItemClick = text => this.setState({ text });\n\n  handleCloseOverlay = () => this.setState({ text: '' });\n  \n  handleChangeStatus = id => {\n    const { movies } = this.state;\n    const newMovies = [];\n\n    for (const movie of movies) {\n      if (movie.id === id) {\n        movie.isWatched = !movie.isWatched;\n        newMovies.push(movie);\n      }\n    else\n      {\n        newMovies.push(movie);\n      }\n    };\n    this.setState({ movies: newMovies });\n  };\n \n  \n\n  render() {\n    const { movies, text } = this.state;\n\n    return (\n      <>\n        <Container>\n          { movies.length >0 &&\n          <><FilmsList\n            movies={movies}\n            onClick={this.handleItemClick}\n            onStatusClick={this.handleChangeStatus}\n          />\n            <Button onClick={this.handleClick}/>\n          </>\n          }\n        </Container>\n        {text && <Overlay text={text} onClick={this.handleCloseOverlay} />}\n      </>);\n\n  }\n\n}\nexport default App;\n*/\n\n//------------hooks-----------//\n\nimport {useState, useEffect } from 'react';\n//import movies from './data/films.json';\nimport filterMovies from './helpers/filterArr';\nimport FilmsList from './components/FilmsList/FilmsList';\nimport Container from './components/Container/Container';\nimport Overlay from './components/Overlay/Overlay';\nimport Button from './components/Button/Button';\nimport Loader from './components/Loader/Loader';\nimport * as api from './Services/api'\n\nexport default function App  (){\nconst [page,setPage ]= useState(1)\nconst [movies,setMovies]=  \n  useState([])\nconst [text,setText]=  \n  useState('')\nconst [isLoading,setIsLoading]=    \n  useState(false)\n\nuseEffect(() => {\n        setIsLoading(true);\n        api.getFilms(page)\n            .then(({ data }) => {\n                setMovies(prevState => [...prevState, ...filterMovies(data.results)]);\n            })\n            .catch(error => console.log(error))\n            .finally(() => {\n                setIsLoading(false);\n                if (page > 1) {\n                    window.scrollTo({\n                        top: document.documentElement.scrollHeight,\n                        behavior: 'smooth',\n                    });\n                }\n            });\n    }, [page]);\n/*\n  const getFilms = page => {\n    setIsLoading(true);\n    api.getFilms(page).then(\n      ({ data }) => {\n         setMovies(prevState => [...prevState, ...filterMovies(data.results)]);\n        })\n      .catch(error => console.log(error))\n      .finally(() => setIsLoading(false));\n     };\n*/\n  const handleClick = () => {\n   \n    setPage( prevPage => prevPage + 1 );\n  \n    //this.setState((prev) => ({ page: prev.page + 1 }))\n  };\n\n  \n\n  const handleItemClick = text => setText( text );\n\n  const handleCloseOverlay = () =>  setText('');\n  \n  const handleChangeStatus = id => {\n\n    const newMovies = [];\n\n    for (const movie of movies) {\n      if (movie.id === id) {\n        movie.isWatched = !movie.isWatched;\n        newMovies.push(movie);\n      }\n    else\n      {\n        newMovies.push(movie);\n      }\n    };\n    setMovies(newMovies);\n  };\n \n\n    return (\n      <>\n        <Container>\n          { movies.length >0 &&\n          <><FilmsList\n            movies={movies}\n            onClick={handleItemClick}\n            onStatusClick={handleChangeStatus}\n          />\n            <Button onClick={handleClick}/>\n          </>\n          }\n        </Container>\n        {isLoading && <Loader/> }\n        {text && <Overlay text={text} onClick={handleCloseOverlay} />}\n      </>);\n\n  }\n\n\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\r\n\r\nconst key = 'e51fa7aa1819bb081f9c2dbbae1f5e9d';\r\n\r\nexport const getFilms= page=>axios.get(BASE_URL+ `?page=${page}&api_key=${key}`)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}